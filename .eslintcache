[{"/Users/m-takase/myhome/mitsuwa-capp/src/App.tsx":"1","/Users/m-takase/myhome/mitsuwa-capp/src/components/Auth.tsx":"2","/Users/m-takase/myhome/mitsuwa-capp/src/components/Feed.tsx":"3","/Users/m-takase/myhome/mitsuwa-capp/src/features/userSlice.ts":"4","/Users/m-takase/myhome/mitsuwa-capp/src/firebase.ts":"5","/Users/m-takase/myhome/mitsuwa-capp/src/serviceWorker.ts":"6","/Users/m-takase/myhome/mitsuwa-capp/src/components/TweetInput.tsx":"7","/Users/m-takase/myhome/mitsuwa-capp/src/components/Post.tsx":"8"},{"size":1240,"mtime":1611907146740,"results":"9","hashOfConfig":"10"},{"size":13843,"mtime":1612067586054,"results":"11","hashOfConfig":"10"},{"size":1670,"mtime":1612088489578,"results":"12","hashOfConfig":"10"},{"size":1049,"mtime":1611906335813,"results":"13","hashOfConfig":"10"},{"size":813,"mtime":1612065877265,"results":"14","hashOfConfig":"10"},{"size":5424,"mtime":1611881658030,"results":"15","hashOfConfig":"10"},{"size":2130,"mtime":1612090608896,"results":"16","hashOfConfig":"10"},{"size":1385,"mtime":1612089202228,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1krb2if",{"filePath":"20","messages":"21","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/m-takase/myhome/mitsuwa-capp/src/App.tsx",[],"/Users/m-takase/myhome/mitsuwa-capp/src/components/Auth.tsx",["35","36","37","38","39","40","41","42"],"import React, { useState } from \"react\";\nimport styles from \"./Auth.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { updateUserProfile } from \"../features/userSlice\";\nimport { auth, provider, db } from \"../firebase\";\n\nimport {\n    Avatar,\n    Button,\n    Container,\n    CssBaseline,\n    TextField,\n    Paper,\n    Grid,\n    Typography,\n    makeStyles,\n    Modal,\n    IconButton,\n    Box,\n} from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CameraIcon from \"@material-ui/icons/Camera\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { Email } from \"@material-ui/icons\";\nimport { idText } from \"typescript\";\n\nconst getModalStyle = () => {\n    const top = 50;\n    const left = 50;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n};\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    modal: {\n        outline: \"none\",\n        position: \"absolute\",\n        width: 400,\n        borderRadius: 10,\n        backgroundColor: \"white\",\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(10),\n    },\n}));\n\nconst Auth: React.FC = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [photoUrl, setphotoUrl] = useState(\"\");\n    const [roomNo, setRoomNo] = useState(\"\");\n    const [secretKey, setSecretKey] = useState(\"\");\n    const [isLogin, setIsLogin] = useState(true);\n    const [openModal, setOpenModal] = useState(false);\n    const [resetEmail, setResetEmail] = useState(\"\");\n\n    const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n        await auth\n            .sendPasswordResetEmail(resetEmail)\n            .then(() => {\n                setOpenModal(false);\n                setResetEmail(\"\");\n            })\n            .catch((err) => {\n                alert(err.message);\n                setResetEmail(\"\");\n            });\n    };\n\n    const signInEmail = async () => {\n        const authUser = await auth.signInWithEmailAndPassword(email, password);\n        await db\n            .collection(\"customerData\")\n            .doc(authUser.user?.uid)\n            .get()\n            .then((doc) => {\n                if (doc.exists) {\n                    if (authUser.user!.uid === doc.data()!.id) {\n                        dispatch(\n                            updateUserProfile({\n                                displayName: doc.data()!.name,\n                                photoUrl: photoUrl,\n                                roomNo: doc.data()!.roomNo,\n                            }),\n                        );\n                    }\n                }\n            })\n            .catch((error) => {\n                alert(\n                    error.message +\n                        \": 認証データの値に異常があります。管理者にお問い合わせください\",\n                );\n            });\n    };\n\n    //シークレットキーの削除\n    const signUpEmail = async () => {\n        await db\n            .collection(\"secretData\")\n            .doc(roomNo)\n            .get()\n            .then(async (doc) => {\n                if (doc.exists && doc.data()!.key === secretKey) {\n                    const authUser = await auth.createUserWithEmailAndPassword(\n                        email,\n                        password,\n                    );\n                    await authUser.user?.updateProfile({\n                        displayName: username,\n                        photoURL: photoUrl,\n                    });\n                    await db\n                        .collection(\"customerData\")\n                        .doc(authUser.user?.uid)\n                        .set({\n                            id: authUser.user?.uid,\n                            roomNo: roomNo,\n                            name: authUser.user?.displayName,\n                            email: authUser.user?.email,\n                        });\n                    //storeのUpdate用\n                    dispatch(\n                        updateUserProfile({\n                            displayName: username,\n                            photoUrl: photoUrl,\n                            roomNo: roomNo,\n                        }),\n                    );\n                } else {\n                    alert(\n                        \"認証データが一致しません。正しい値を入力してください。\",\n                    );\n                }\n            })\n            .catch((error) => {\n                alert(\n                    error.message +\n                        \": 認証データの値に異常があります。管理者にお問い合わせください\",\n                );\n            });\n    };\n\n    // カスタムプロフィール\n    // 新規と既存をどうするか\n    // const signInGoogle = async () => {\n    //     await auth.signInWithPopup(provider).catch((err) => alert(err.message));\n    // };\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    {isLogin ? \"ログイン\" : \"ユーザー登録\"}\n                </Typography>\n                <form className={classes.form} noValidate>\n                    {!isLogin && (\n                        <>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"username\"\n                                label=\"氏名\"\n                                name=\"username\"\n                                autoComplete=\"username\"\n                                autoFocus\n                                value={username}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                ) => {\n                                    setUsername(e.target.value);\n                                }}\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"roomNo\"\n                                label=\"部屋番号\"\n                                name=\"roomNo\"\n                                autoComplete=\"roomNo\"\n                                autoFocus\n                                value={roomNo}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                ) => {\n                                    setRoomNo(e.target.value);\n                                }}\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"secretKey\"\n                                label=\"secretKey\"\n                                type=\"password\"\n                                id=\"secretKey\"\n                                autoComplete=\"secretKey\"\n                                value={secretKey}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                ) => setSecretKey(e.target.value)}\n                            />\n                        </>\n                    )}\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                        value={email}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setEmail(e.target.value)\n                        }\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        value={password}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setPassword(e.target.value)\n                        }\n                    />\n                    <Button\n                        disabled={\n                            isLogin\n                                ? !email || password.length < 6\n                                : !username ||\n                                  !email ||\n                                  password.length < 6 ||\n                                  !roomNo ||\n                                  !secretKey\n                        }\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        startIcon={<EmailIcon />}\n                        onClick={\n                            isLogin\n                                ? async () => {\n                                      try {\n                                          await signInEmail();\n                                      } catch (err) {\n                                          alert(err.message);\n                                      }\n                                  }\n                                : async () => {\n                                      try {\n                                          await signUpEmail();\n                                      } catch (err) {\n                                          alert(err.message);\n                                      }\n                                  }\n                        }\n                    >\n                        {isLogin ? \"ログイン\" : \"ユーザー登録\"}\n                    </Button>\n                    <Grid container>\n                        <Grid item xs>\n                            <span\n                                className={styles.login_reset}\n                                onClick={() => setOpenModal(true)}\n                            >\n                                パスワード再設定\n                            </span>\n                        </Grid>\n                        <Grid item>\n                            <span\n                                className={styles.login_toggleMode}\n                                onClick={() => setIsLogin(!isLogin)}\n                            >\n                                {isLogin\n                                    ? \"新規ユーザー登録画面へ\"\n                                    : \"ログイン画面へ\"}\n                            </span>\n                        </Grid>\n                    </Grid>\n                    {/* <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<CameraIcon />}\n                        className={classes.submit}\n                        onClick={signInGoogle}\n                    >\n                        Googleアカウントでログイン\n                    </Button> */}\n                </form>\n                <Modal open={openModal} onClose={() => setOpenModal(false)}>\n                    <div style={getModalStyle()} className={classes.modal}>\n                        <div className={styles.login_modal}>\n                            <TextField\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                type=\"email\"\n                                name=\"email\"\n                                label=\"Reset E-mail\"\n                                value={resetEmail}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>,\n                                ) => {\n                                    setResetEmail(e.target.value);\n                                }}\n                            />\n                            <IconButton onClick={sendResetEmail}>\n                                <SendIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                </Modal>\n            </div>\n        </Container>\n    );\n};\n\nexport default Auth;\n","/Users/m-takase/myhome/mitsuwa-capp/src/components/Feed.tsx",[],"/Users/m-takase/myhome/mitsuwa-capp/src/features/userSlice.ts",[],"/Users/m-takase/myhome/mitsuwa-capp/src/firebase.ts",[],"/Users/m-takase/myhome/mitsuwa-capp/src/serviceWorker.ts",[],"/Users/m-takase/myhome/mitsuwa-capp/src/components/TweetInput.tsx",["43","44"],"/Users/m-takase/myhome/mitsuwa-capp/src/components/Post.tsx",["45","46","47","48","49","50","51","52","53"],{"ruleId":"54","severity":1,"message":"55","line":5,"column":16,"nodeType":"56","messageId":"57","endLine":5,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":13,"column":5,"nodeType":"56","messageId":"57","endLine":13,"endColumn":10},{"ruleId":"54","severity":1,"message":"59","line":19,"column":5,"nodeType":"56","messageId":"57","endLine":19,"endColumn":8},{"ruleId":"54","severity":1,"message":"60","line":23,"column":8,"nodeType":"56","messageId":"57","endLine":23,"endColumn":18},{"ruleId":"54","severity":1,"message":"61","line":26,"column":8,"nodeType":"56","messageId":"57","endLine":26,"endColumn":25},{"ruleId":"54","severity":1,"message":"62","line":27,"column":10,"nodeType":"56","messageId":"57","endLine":27,"endColumn":15},{"ruleId":"54","severity":1,"message":"63","line":28,"column":10,"nodeType":"56","messageId":"57","endLine":28,"endColumn":16},{"ruleId":"54","severity":1,"message":"64","line":76,"column":22,"nodeType":"56","messageId":"57","endLine":76,"endColumn":33},{"ruleId":"54","severity":1,"message":"65","line":6,"column":18,"nodeType":"56","messageId":"57","endLine":6,"endColumn":28},{"ruleId":"54","severity":1,"message":"66","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":21},{"ruleId":"54","severity":1,"message":"67","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"68","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"69","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":12},{"ruleId":"54","severity":1,"message":"70","line":4,"column":8,"nodeType":"56","messageId":"57","endLine":4,"endColumn":16},{"ruleId":"54","severity":1,"message":"71","line":5,"column":10,"nodeType":"56","messageId":"57","endLine":5,"endColumn":21},{"ruleId":"54","severity":1,"message":"72","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":20},{"ruleId":"54","severity":1,"message":"73","line":7,"column":10,"nodeType":"56","messageId":"57","endLine":7,"endColumn":20},{"ruleId":"54","severity":1,"message":"74","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":19},{"ruleId":"54","severity":1,"message":"75","line":9,"column":8,"nodeType":"56","messageId":"57","endLine":9,"endColumn":16},"@typescript-eslint/no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'Box' is defined but never used.","'CameraIcon' is defined but never used.","'AccountCircleIcon' is defined but never used.","'Email' is defined but never used.","'idText' is defined but never used.","'setphotoUrl' is assigned a value but never used.","'IconButton' is defined but never used.","'AddAPhotoIcon' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'db' is defined but never used.","'firebase' is defined but never used.","'useSelector' is defined but never used.","'selectUser' is defined but never used.","'makeStyles' is defined but never used.","'MessageIcon' is defined but never used.","'SendIcon' is defined but never used."]